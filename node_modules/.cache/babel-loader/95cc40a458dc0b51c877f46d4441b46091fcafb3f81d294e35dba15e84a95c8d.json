{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from './authService';\nconst localuser = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: localuser ? localuser : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n  try {\n    return await authService.login(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const logout = createAsyncThunk('auth/logout', async () => await authService.logout());\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, (state, action) => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = 'Email Address Exists';\n      state.user = null;\n    }).addCase(logout.fulfilled, state => {\n      state.user = null;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authService","localuser","JSON","parse","localStorage","getItem","initialState","user","isError","isSuccess","isLoading","message","register","thunkAPI","error","response","data","toString","rejectWithValue","login","logout","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","action","fulfilled","payload","rejected","actions","reducer"],"sources":["D:/Qanita/Experiments/Task-MERN/frontend/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport authService from './authService';\r\nconst localuser = JSON.parse(localStorage.getItem('user'));\r\nconst initialState = {\r\n    user: localuser ? localuser : null,\r\n    isError: false,\r\n    isSuccess: false,\r\n    isLoading: false,\r\n    message: ''\r\n}\r\nexport const register = createAsyncThunk(\r\n    'auth/register',\r\n    async (user, thunkAPI) => {\r\n        try {\r\n            return await authService.register(user)\r\n        } catch (error) {\r\n            const message = (error.response && error.response.data && error.message ) || error.toString()\r\n            return thunkAPI.rejectWithValue(message)\r\n        }\r\n    }\r\n)\r\nexport const login = createAsyncThunk(\r\n    'auth/login',\r\n    async (user, thunkAPI) => {\r\n        try {\r\n            return await authService.login(user)\r\n        } catch (error) {\r\n            const message = (error.response && error.response.data && error.message ) || error.toString()\r\n            return thunkAPI.rejectWithValue(message)\r\n        }\r\n    }\r\n)\r\nexport const logout = createAsyncThunk(\r\n    'auth/logout',\r\n    async () => await authService.logout()\r\n);\r\nexport const authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        reset: state => {\r\n            state.isLoading = false;\r\n            state.isSuccess = false;\r\n            state.isError = false;\r\n            state.message = '';\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n        .addCase(register.pending, (state, action) => {\r\n            state.isLoading = true;\r\n        })\r\n        .addCase(register.fulfilled, (state, action) => {\r\n            state.isLoading = false;\r\n            state.isSuccess = true;\r\n            state.user = action.payload;\r\n        })\r\n        .addCase(register.rejected, (state, action) => {\r\n            state.isLoading = false;\r\n            state.isError = true;\r\n            state.message = 'Email Address Exists';\r\n            state.user = null;\r\n        })\r\n        .addCase(logout.fulfilled, (state) => {\r\n            state.user = null;\r\n        })\r\n        .addCase(login.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(login.fulfilled, (state, action) => {\r\n            state.isLoading = false\r\n            state.isSuccess = true\r\n            state.user = action.payload\r\n        })\r\n        .addCase(login.rejected, (state, action) => {\r\n            state.isLoading = false\r\n            state.isError = true\r\n            state.message = action.payload\r\n            state.user = null\r\n        })\r\n    }\r\n})\r\nexport const { reset } = authSlice.actions;\r\nexport default authSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}